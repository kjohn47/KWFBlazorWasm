@inject IAppAssemblyInjector assemblyInjector;
<CascadingValue Value="@AuthenticationContext" Name="AuthenticationContext">
    <CascadingValue Value="@AppLanguage" Name="AppLanguage">
        <div class="KwfApp">
            @if (appIsStarting)
            {
                <div class="ApiLoading">
                    App loading language from api and checking authentication
                </div>
            }
            else
            {
                var typeOfLayout = @configuration?.OverrideMainLayout == null ? typeof(KwfMainLayout) : configuration.OverrideMainLayout;
                <Router AppAssembly="assemblyInjector.MainAssembly" AdditionalAssemblies="assemblyInjector.AdditionalAssemblies" PreferExactMatches="@true">
                    <Found Context="routeData">
                        <RouteView RouteData="@routeData" DefaultLayout="@typeOfLayout" />
                    </Found>
                    <NotFound>
                        <LayoutView Layout="@typeOfLayout">
                            @if (configuration?.OverrideNotFoundComponent != null)
                            {
                                @configuration.OverrideNotFoundComponent
                            }
                            else
                            {
                                <KwfError ErrorMessageToken="#(ERROR_NOTFOUND_MESSAGE)" ErrorTitleToken="#(ERROR_NOTFOUND_TITLE)" />
                            }
                        </LayoutView>
                    </NotFound>
                </Router>
            }
        </div>
    </CascadingValue>
</CascadingValue>

@code
{
    [Inject]
    private IKwfAppConfiguration configuration { get; set; }

    [Inject]
    private IApplicationContext applicationContext { get; set; }

    [Inject]
    private ILanguageContextInitializer languageInitializer { get; set; }

    [Inject]
    private IAuthenticationContextInitializer authenticationInitializer { get; set; }

    private bool appIsStarting => !languageInitializer.IsInitialized && !authenticationInitializer.IsInitialized;

    public ILanguageContext AppLanguage { get; set; }

    public IAuthenticationContext AuthenticationContext { get; set; }

    protected override void OnInitialized()
    {
        if (applicationContext is ApplicationContext appCtx)
        {
            appCtx.ExecuteInitializeActions(new Action(this.StateHasChanged));
        }

        base.OnInitialized();
    }

    protected override Task OnInitializedAsync()
    {
        if (applicationContext is ApplicationContext appCtx)
        {
            return appCtx.ExecuteInitializeActionsAsync(base.OnInitializedAsync());
        }

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AppLanguage = await languageInitializer.InitializeLanguageContext();
            AuthenticationContext = await authenticationInitializer.Initialize();
            StateHasChanged();
        }
    }
}
