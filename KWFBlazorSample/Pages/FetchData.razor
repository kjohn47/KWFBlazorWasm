@page "/fetchdata"
@inject IKwfHttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    var changeLanguageBtnText = AppLanguage?.GetCustomTranslation("LanguageSelector", "#(Change_To)");

    if (AppLanguage?.IsLoading ?? true)
    {
        <span>Loading language</span>
        <br />
    }
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    @if (AppLanguage?.Languages is not null)
    {
        foreach (var lang in @AppLanguage.Languages)
        {
            var text = string.Format(changeLanguageBtnText ?? string.Empty, lang.Value);

            if (lang.Key.Equals(AppLanguage.LanguageCode))
            {
                <span>
                    <button disabled>@text</button>&nbsp;
                </span>
            }
            else
            {
                <span>
                    <button @onclick="@(async () => await AppLanguage.ChangeLanguage(lang.Key))">@text</button>&nbsp;
                </span>
            }

        }
    }
}

@code {
    [Inject]
    private IApplicationContext? applicationContext { get; set; }

    [CascadingParameter(Name = "AppLanguage")]
    public ILanguageContext? AppLanguage { get; set; }

    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        var result = await Http.KwfGetJsonAsync<WeatherForecast[]>("FETCHWEATHER");
        if(result.Error.HasValue)
        {
            Console.WriteLine($"Error {System.Text.Json.JsonSerializer.Serialize(result.Error.Value, applicationContext?.StandartAppJsonSettings?.JsonSerializerOptions)}");
        }
        forecasts = result.Response?? new WeatherForecast[] { };
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
